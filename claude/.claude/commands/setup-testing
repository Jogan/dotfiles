#!/bin/bash

# Claude Code Testing Setup
# This command helps set up testing infrastructure for different project types

set -e

echo "🧪 Setting up testing infrastructure..."

# Detect project type
PROJECT_TYPE=""
if [ -f "package.json" ]; then
    PROJECT_TYPE="node"
elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || [ -f "setup.py" ]; then
    PROJECT_TYPE="python"
elif [ -f "Cargo.toml" ]; then
    PROJECT_TYPE="rust"
elif [ -f "go.mod" ]; then
    PROJECT_TYPE="go"
else
    echo "❓ Could not detect project type"
    echo "💡 Supported types: Node.js, Python, Rust, Go"
    exit 1
fi

echo "🔍 Detected project type: $PROJECT_TYPE"

case $PROJECT_TYPE in
    "node")
        echo "📦 Setting up Node.js testing..."
        
        # Check if package.json has test scripts
        if ! grep -q '"test"' package.json 2>/dev/null; then
            echo "⚠️  No test script found in package.json"
            echo "💡 Consider adding test frameworks like Jest, Vitest, or Mocha"
            echo ""
            echo "Example test script additions:"
            echo '  "test": "jest",'
            echo '  "test:watch": "jest --watch",'
            echo '  "test:coverage": "jest --coverage"'
        else
            echo "✅ Test script found in package.json"
        fi
        
        # Create basic test directory structure
        mkdir -p tests/__tests__ tests/fixtures tests/utils
        echo "📁 Created test directory structure"
        
        # Create example test file if none exists
        if [ ! -f "tests/__tests__/example.test.js" ] && [ ! -f "tests/__tests__/example.test.ts" ]; then
            cat > tests/__tests__/example.test.js << 'EOF'
// Example test file
// Replace with your actual tests

describe('Example Test Suite', () => {
  test('should pass basic test', () => {
    expect(true).toBe(true);
  });
  
  test('should test a function', () => {
    const sum = (a, b) => a + b;
    expect(sum(2, 3)).toBe(5);
  });
});
EOF
            echo "📝 Created example test file"
        fi
        ;;
        
    "python")
        echo "🐍 Setting up Python testing..."
        
        # Create test directory structure
        mkdir -p tests tests/unit tests/integration tests/fixtures
        
        # Check for pytest or unittest
        if command -v pytest >/dev/null 2>&1; then
            echo "✅ pytest is available"
        else
            echo "⚠️  pytest not found - consider installing: pip install pytest"
        fi
        
        # Create basic test files
        if [ ! -f "tests/test_example.py" ]; then
            cat > tests/test_example.py << 'EOF'
"""Example test file - replace with your actual tests."""

import unittest


class TestExample(unittest.TestCase):
    """Example test class."""
    
    def test_basic_assertion(self):
        """Test basic assertion."""
        self.assertTrue(True)
    
    def test_function(self):
        """Test a simple function."""
        def add(a, b):
            return a + b
        
        self.assertEqual(add(2, 3), 5)


if __name__ == '__main__':
    unittest.main()
EOF
            echo "📝 Created example test file"
        fi
        
        # Create pytest config if using pytest
        if command -v pytest >/dev/null 2>&1 && [ ! -f "pytest.ini" ] && [ ! -f "pyproject.toml" ]; then
            cat > pytest.ini << 'EOF'
[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = -v --tb=short
EOF
            echo "📝 Created pytest configuration"
        fi
        ;;
        
    "rust")
        echo "🦀 Setting up Rust testing..."
        
        if [ -d "src" ]; then
            echo "✅ Rust project structure detected"
            echo "💡 Use 'cargo test' to run tests"
            echo "💡 Add #[cfg(test)] modules to your source files"
            
            # Create integration test example
            mkdir -p tests
            if [ ! -f "tests/integration_test.rs" ]; then
                cat > tests/integration_test.rs << 'EOF'
// Integration test example
// Replace with your actual integration tests

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        let result = 2 + 2;
        assert_eq!(result, 4);
    }
}
EOF
                echo "📝 Created example integration test"
            fi
        else
            echo "❌ src directory not found"
        fi
        ;;
        
    "go")
        echo "🐹 Setting up Go testing..."
        
        echo "✅ Go has built-in testing"
        echo "💡 Use 'go test ./...' to run all tests"
        echo "💡 Test files should end with '_test.go'"
        
        # Create example test file
        if [ ! -f "example_test.go" ]; then
            cat > example_test.go << 'EOF'
package main

import "testing"

// Example test function
func TestExample(t *testing.T) {
    result := 2 + 2
    expected := 4
    
    if result != expected {
        t.Errorf("Expected %d, got %d", expected, result)
    }
}

// Example benchmark
func BenchmarkExample(b *testing.B) {
    for i := 0; i < b.N; i++ {
        _ = 2 + 2
    }
}
EOF
            echo "📝 Created example test file"
        fi
        ;;
esac

echo ""
echo "🎯 Testing setup complete!"
echo ""
echo "Next steps:"
echo "1. Write your actual tests"
echo "2. Run tests to verify setup"
echo "3. Set up CI/CD to run tests automatically"
echo "4. Consider adding test coverage reporting"
echo ""
echo "💡 Use 'quality-check' command to run tests and other quality checks"