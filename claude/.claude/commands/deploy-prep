#!/bin/bash

# Claude Code Deploy Preparation
# This command runs pre-deployment checks and preparations

set -e

echo "üöÄ Preparing for deployment..."

# Initialize counters
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0
WARNINGS=0

# Function to run a check and track results
run_check() {
    local check_name="$1"
    local command="$2"
    local critical="${3:-true}"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    echo ""
    echo "üîç $check_name"
    
    if eval "$command" >/dev/null 2>&1; then
        echo "   ‚úÖ PASSED"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        if [ "$critical" = "true" ]; then
            echo "   ‚ùå FAILED (CRITICAL)"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
        else
            echo "   ‚ö†Ô∏è  WARNING"
            WARNINGS=$((WARNINGS + 1))
        fi
    fi
}

# Function to show warning
show_warning() {
    echo "‚ö†Ô∏è  WARNING: $1"
    WARNINGS=$((WARNINGS + 1))
}

# Function to show info
show_info() {
    echo "‚ÑπÔ∏è  INFO: $1"
}

# Detect project type
PROJECT_TYPE=""
if [ -f "package.json" ]; then
    PROJECT_TYPE="node"
elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || [ -f "setup.py" ]; then
    PROJECT_TYPE="python"
elif [ -f "Cargo.toml" ]; then
    PROJECT_TYPE="rust"
elif [ -f "go.mod" ]; then
    PROJECT_TYPE="go"
fi

echo "üîç Project type: ${PROJECT_TYPE:-unknown}"

# Critical pre-deployment checks
echo ""
echo "üéØ CRITICAL CHECKS"
echo "=================="

# Git status
if ! git diff --quiet || ! git diff --cached --quiet; then
    show_warning "Working directory is not clean - uncommitted changes detected"
else
    run_check "Git working directory clean" "true"
fi

# Branch check
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" = "main" ] || [ "$CURRENT_BRANCH" = "master" ]; then
    show_info "Deploying from main/master branch"
else
    show_warning "Deploying from non-main branch: $CURRENT_BRANCH"
fi

# Remote sync check
if git status | grep -q "ahead\|behind"; then
    show_warning "Branch is not in sync with remote"
else
    run_check "Branch in sync with remote" "true"
fi

# Project-specific deployment checks
case $PROJECT_TYPE in
    "node")
        echo ""
        echo "üì¶ NODE.JS DEPLOYMENT CHECKS"
        echo "============================"
        
        run_check "Package.json exists" "test -f package.json"
        run_check "Package-lock.json exists" "test -f package-lock.json || test -f yarn.lock" false
        
        if grep -q '"build"' package.json 2>/dev/null; then
            run_check "Build succeeds" "npm run build"
        fi
        
        if grep -q '"test"' package.json 2>/dev/null; then
            run_check "Tests pass" "npm test"
        fi
        
        if grep -q '"lint"' package.json 2>/dev/null; then
            run_check "Linting passes" "npm run lint"
        fi
        
        # Check for production dependencies
        if [ -f "package.json" ]; then
            if ! grep -q '"dependencies"' package.json; then
                show_warning "No production dependencies found"
            fi
        fi
        
        # Environment variables check
        if [ -f ".env.example" ] && [ ! -f ".env" ]; then
            show_warning ".env.example exists but .env is missing"
        fi
        
        # Security audit
        run_check "Security audit" "npm audit --audit-level=high" false
        ;;
        
    "python")
        echo ""
        echo "üêç PYTHON DEPLOYMENT CHECKS"
        echo "==========================="
        
        if [ -f "requirements.txt" ]; then
            run_check "Requirements.txt exists" "test -f requirements.txt"
        fi
        
        if command -v pytest >/dev/null 2>&1; then
            run_check "Tests pass" "pytest" false
        fi
        
        # Check for common production files
        run_check "Gunicorn or WSGI config" "test -f wsgi.py || test -f gunicorn.conf.py || grep -q gunicorn requirements.txt" false
        ;;
        
    "rust")
        echo ""
        echo "ü¶Ä RUST DEPLOYMENT CHECKS"
        echo "========================="
        
        run_check "Cargo build (release)" "cargo build --release"
        run_check "Cargo tests pass" "cargo test"
        run_check "Cargo clippy" "cargo clippy -- -D warnings" false
        ;;
        
    "go")
        echo ""
        echo "üêπ GO DEPLOYMENT CHECKS"
        echo "======================="
        
        run_check "Go build" "go build ./..."
        run_check "Go tests pass" "go test ./..."
        run_check "Go vet" "go vet ./..." false
        ;;
esac

# Common deployment file checks
echo ""
echo "üìã DEPLOYMENT CONFIGURATION"
echo "==========================="

# Docker checks
if [ -f "Dockerfile" ]; then
    show_info "Dockerfile found"
    run_check "Docker build" "docker build -t deployment-test ." false
    
    if [ -f ".dockerignore" ]; then
        show_info ".dockerignore found"
    else
        show_warning ".dockerignore not found - may include unnecessary files"
    fi
fi

# CI/CD checks
if [ -d ".github/workflows" ]; then
    show_info "GitHub Actions workflows found"
elif [ -f ".gitlab-ci.yml" ]; then
    show_info "GitLab CI configuration found"
elif [ -f "Jenkinsfile" ]; then
    show_info "Jenkins configuration found"
else
    show_warning "No CI/CD configuration detected"
fi

# Environment and secrets check
echo ""
echo "üîê SECURITY & ENVIRONMENT"
echo "========================="

# Check for common secret files that shouldn't exist
SECRET_FILES=(".env" "secrets.json" "credentials.json" "private.key")
for file in "${SECRET_FILES[@]}"; do
    if [ -f "$file" ]; then
        show_warning "Sensitive file detected: $file (ensure it's in .gitignore)"
    fi
done

# Check .gitignore
if [ -f ".gitignore" ]; then
    show_info ".gitignore found"
    
    # Check for common items that should be ignored
    SHOULD_IGNORE=("node_modules" ".env" "*.log" ".DS_Store")
    for item in "${SHOULD_IGNORE[@]}"; do
        if ! grep -q "$item" .gitignore; then
            show_warning ".gitignore missing: $item"
        fi
    done
else
    show_warning ".gitignore not found"
fi

# Final summary
echo ""
echo "üìä DEPLOYMENT READINESS SUMMARY"
echo "==============================="
echo "Total checks: $TOTAL_CHECKS"
echo "Passed: $PASSED_CHECKS"
echo "Failed: $FAILED_CHECKS"
echo "Warnings: $WARNINGS"

if [ $FAILED_CHECKS -eq 0 ]; then
    if [ $WARNINGS -eq 0 ]; then
        echo ""
        echo "üéâ READY FOR DEPLOYMENT!"
        echo "All checks passed with no warnings."
    else
        echo ""
        echo "‚úÖ DEPLOYMENT APPROVED (with warnings)"
        echo "Address warnings when possible, but deployment can proceed."
    fi
    exit 0
else
    echo ""
    echo "‚ùå DEPLOYMENT BLOCKED"
    echo "Critical issues must be resolved before deployment."
    exit 1
fi