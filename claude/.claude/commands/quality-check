#!/bin/bash

# Claude Code Quality Check
# This command runs comprehensive quality checks for your project

set -e

echo "üîç Running quality checks..."

# Initialize counters
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

# Function to run a check and track results
run_check() {
    local check_name="$1"
    local command="$2"
    local optional="${3:-false}"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    echo ""
    echo "üß™ $check_name"
    echo "   Command: $command"
    
    if eval "$command" 2>/dev/null; then
        echo "   ‚úÖ PASSED"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        if [ "$optional" = "true" ]; then
            echo "   ‚ö†Ô∏è  SKIPPED (optional)"
        else
            echo "   ‚ùå FAILED"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
        fi
    fi
}

# Detect project type
PROJECT_TYPE=""
if [ -f "package.json" ]; then
    PROJECT_TYPE="node"
elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || [ -f "setup.py" ]; then
    PROJECT_TYPE="python"
elif [ -f "Cargo.toml" ]; then
    PROJECT_TYPE="rust"
elif [ -f "go.mod" ]; then
    PROJECT_TYPE="go"
fi

echo "üîç Detected project type: ${PROJECT_TYPE:-unknown}"

# Common checks for all projects
run_check "Git status clean" "git diff --quiet && git diff --cached --quiet" true
run_check "CLAUDE.md exists" "test -f CLAUDE.md"

# Project-specific checks
case $PROJECT_TYPE in
    "node")
        # Node.js specific checks
        run_check "Package.json exists" "test -f package.json"
        run_check "Node modules installed" "test -d node_modules"
        
        # Check for common scripts and run them
        if grep -q '"lint"' package.json 2>/dev/null; then
            run_check "Linting" "npm run lint"
        fi
        
        if grep -q '"test"' package.json 2>/dev/null; then
            run_check "Tests" "npm test"
        fi
        
        if grep -q '"typecheck"' package.json 2>/dev/null; then
            run_check "Type checking" "npm run typecheck"
        fi
        
        if grep -q '"build"' package.json 2>/dev/null; then
            run_check "Build" "npm run build" true
        fi
        
        # Check for security vulnerabilities
        run_check "Security audit" "npm audit --audit-level=moderate" true
        ;;
        
    "python")
        # Python specific checks
        if command -v python >/dev/null 2>&1; then
            run_check "Python syntax" "python -m py_compile *.py" true
        fi
        
        if command -v flake8 >/dev/null 2>&1; then
            run_check "Flake8 linting" "flake8 ." true
        fi
        
        if command -v black >/dev/null 2>&1; then
            run_check "Black formatting" "black --check ." true
        fi
        
        if command -v pytest >/dev/null 2>&1; then
            run_check "Pytest tests" "pytest" true
        elif [ -f "tests/test_*.py" ] || [ -f "test_*.py" ]; then
            run_check "Python unittest" "python -m unittest discover" true
        fi
        
        if command -v mypy >/dev/null 2>&1; then
            run_check "MyPy type checking" "mypy ." true
        fi
        ;;
        
    "rust")
        # Rust specific checks
        run_check "Rust format check" "cargo fmt -- --check" true
        run_check "Rust clippy" "cargo clippy -- -D warnings" true
        run_check "Rust tests" "cargo test"
        run_check "Rust build" "cargo build" true
        ;;
        
    "go")
        # Go specific checks
        run_check "Go format check" "gofmt -l . | wc -l | grep -q '^0$'" true
        run_check "Go vet" "go vet ./..." true
        run_check "Go tests" "go test ./..."
        run_check "Go build" "go build ./..." true
        ;;
esac

# Additional checks for all projects
if [ -f ".github/workflows" ] || [ -f ".gitlab-ci.yml" ] || [ -f "Jenkinsfile" ]; then
    echo ""
    echo "üîß CI/CD configuration detected"
fi

if [ -f "Dockerfile" ]; then
    run_check "Dockerfile lint" "command -v hadolint >/dev/null && hadolint Dockerfile" true
fi

# Summary
echo ""
echo "üìä QUALITY CHECK SUMMARY"
echo "======================="
echo "Total checks: $TOTAL_CHECKS"
echo "Passed: $PASSED_CHECKS"
echo "Failed: $FAILED_CHECKS"

if [ $FAILED_CHECKS -eq 0 ]; then
    echo ""
    echo "üéâ All quality checks passed!"
    exit 0
else
    echo ""
    echo "‚ö†Ô∏è  Some quality checks failed. Please review and fix the issues above."
    exit 1
fi